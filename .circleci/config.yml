version: 2.1

executors:
  python36:
    docker:
      - image: circleci/python:3.6
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"
      - image: redis:5.0.7
      - image: mysql:5.6
        environment:
          MYSQL_DATABASE: dev
          MYSQL_ROOT_PASSWORD: password

  python37:
    docker:
      - image: circleci/python:3.7
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"
      - image: redis:5.0.7
      - image: mysql:5.6
        environment:
          MYSQL_DATABASE: dev
          MYSQL_ROOT_PASSWORD: password

  python38:
    docker:
      - image: circleci/python:3.8
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"
      - image: redis:5.0.7
      - image: mysql:5.6
        environment:
          MYSQL_DATABASE: dev
          MYSQL_ROOT_PASSWORD: password

  publish:
    docker:
      - image: circleci/python:3.6

commands:
  setup:
    steps:
      - checkout
      - run:
          name: Execute prerequisite setup
          command: |
            curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
            echo 'export PATH="$HOME/.poetry/bin:$PATH"' >> $BASH_ENV

  run-make:
    parameters:
      command:
        type: string
    steps:
      - run:
          name: Run a make command
          command: |
            make << parameters.command >>

  setup-python-base:
    description: Install python dependencies
    steps:
      - setup
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run-make:
          command: install-base
      - save_cache:
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}

  setup-python:
    description: Install python dependencies
    steps:
      - setup
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run-make:
          command: install
      - save_cache:
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}

  persist-coverage:
    steps:
      - persist_to_workspace:
          root: .
          paths:
            - .coverage
            - coverage.xml

  publish:
    steps:
      - attach_workspace:
          at: .
      - run: bash <(curl -s https://codecov.io/bash)

jobs:
  test-without-extras:
    executor: python36
    steps:
      - setup-python-base
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test-base
      - persist-coverage

  test-python36:
    executor: python36
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: .
      - run-make:
          command: test
      - persist-coverage

  test-python37:
    executor: python37
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  test-python38:
    executor: python38
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  test-pytest6:
    executor: python38
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run: pip install pytest==6.1.1
      - run-make:
          command: test

  lint:
    executor: python36
    steps:
      - setup-python
      - run-make:
          command: lint

  publish:
    executor: publish
    steps:
      - setup-python
      - publish


workflows:
  build_all:
    jobs:
      - test-without-extras
      - test-python36:
          requires:
            - test-without-extras
      - test-python37
      - test-python38
      - test-pytest6

      - publish:
          requires:
            - test-without-extras
            - test-python36
            - test-python37
            - test-python38
            - test-pytest6
          filters:
            branches:
              only:
                - /^master$/
