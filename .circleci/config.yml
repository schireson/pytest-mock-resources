version: 2.1

executors:
  python2:
    docker:
      - image: circleci/python:2.7.14
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"

  python36:
    docker:
      - image: circleci/python:3.6
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"

  python37:
    docker:
      - image: circleci/python:3.7
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"

  python38:
    docker:
      - image: circleci/python:3.8
      - image: postgres:9.6.10-alpine
        environment:
          POSTGRES_DB: dev
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
      - image: circleci/mongo:3.6.12
        command: "mongod --journal"

  publish:
    docker:
      - image: schireson/cicd-python

      # XXX: Swap to this for public version
      # - image: circleci/python:3.6

commands:
  setup:
    steps:
      - checkout
      - run:
          name: Execute prerequisite setup
          command: |
            curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | POETRY_PREVIEW=1 python
            echo 'export PATH="$HOME/.poetry/bin:$PATH"' >> $BASH_ENV

  run-make:
    parameters:
      command:
        type: string
    steps:
      - run:
          name: Run a make command
          command: |
            make << parameters.command >>

  setup-python-base:
    description: Install python dependencies
    steps:
      - setup
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run-make:
          command: install-base
      - save_cache:
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}

  setup-python:
    description: Install python dependencies
    steps:
      - setup
      - restore_cache:
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}
      - run-make:
          command: install
      - save_cache:
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
          key: v1-{{ checksum "pyproject.toml" }}-{{ checksum "poetry.lock" }}

  publish-internal:
    description: Authenticate with a particular ECR instance on AWS
    steps:
      - run:
          command: |
            aws configure set default.region "${AWS_DEFAULT_REGION:-us-east-1}"
            printf "${AWS_CREDENTIALS}" > ~/.aws/credentials

            poetry run -- pip install twine
            poetry run -- lucha aws whitelist --profile artifactory -- lucha cicd publish pypi

            sudo pip install -r docs/requirements.txt
            lucha build docs
            lucha aws whitelist-s3-bucket-policy --bucket docs.schireson.com --profile docs -- lucha publish docs --build-dir docs/build/html --package pytest_mock_resources --profile docs --latest

jobs:
  test-without-extras:
    executor: python36
    steps:
      - setup-python-base
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test-base

  test-python2:
    executor: python2
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  test-python36:
    executor: python36
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  test-python37:
    executor: python37
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  test-python38:
    executor: python38
    steps:
      - setup-python
      - setup_remote_docker:
          docker_layer_caching: true
      - run-make:
          command: test

  lint:
    executor: python36
    steps:
      - setup-python
      - run-make:
          command: lint

  publish:
    executor: publish
    steps:
      - setup-python
      - publish-internal
      # XXX: Swap to this for public version and delete "publish-internal" command
      # - run-make:
      #     command: publish


workflows:
  build_all:
    jobs:
      - test-without-extras
      - test-python2
      - test-python36
      - test-python37
      - test-python38

      - publish:
          requires:
            - test-without-extras
            - test-python2
            - test-python36
            - test-python37
            - test-python38
          filters:
            branches:
              only:
                - /^master$/
